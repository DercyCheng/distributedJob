// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth_service.go

// Package service is a generated GoMock package.
package service

import (
	entity "distributedJob/internal/model/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateDepartment mocks base method.
func (m *MockAuthService) CreateDepartment(dept *entity.Department) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepartment", dept)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepartment indicates an expected call of CreateDepartment.
func (mr *MockAuthServiceMockRecorder) CreateDepartment(dept interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepartment", reflect.TypeOf((*MockAuthService)(nil).CreateDepartment), dept)
}

// CreateRole mocks base method.
func (m *MockAuthService) CreateRole(role *entity.Role) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", role)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockAuthServiceMockRecorder) CreateRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockAuthService)(nil).CreateRole), role)
}

// CreateUser mocks base method.
func (m *MockAuthService) CreateUser(user *entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthService)(nil).CreateUser), user)
}

// DeleteDepartment mocks base method.
func (m *MockAuthService) DeleteDepartment(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDepartment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDepartment indicates an expected call of DeleteDepartment.
func (mr *MockAuthServiceMockRecorder) DeleteDepartment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDepartment", reflect.TypeOf((*MockAuthService)(nil).DeleteDepartment), id)
}

// DeleteRole mocks base method.
func (m *MockAuthService) DeleteRole(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockAuthServiceMockRecorder) DeleteRole(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockAuthService)(nil).DeleteRole), id)
}

// DeleteUser mocks base method.
func (m *MockAuthService) DeleteUser(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthServiceMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuthService)(nil).DeleteUser), id)
}

// GenerateTokens mocks base method.
func (m *MockAuthService) GenerateTokens(user *entity.User) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockAuthServiceMockRecorder) GenerateTokens(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockAuthService)(nil).GenerateTokens), user)
}

// GetDepartmentByID mocks base method.
func (m *MockAuthService) GetDepartmentByID(id int64) (*entity.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartmentByID", id)
	ret0, _ := ret[0].(*entity.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartmentByID indicates an expected call of GetDepartmentByID.
func (mr *MockAuthServiceMockRecorder) GetDepartmentByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartmentByID", reflect.TypeOf((*MockAuthService)(nil).GetDepartmentByID), id)
}

// GetDepartmentList mocks base method.
func (m *MockAuthService) GetDepartmentList(page, size int) ([]*entity.Department, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartmentList", page, size)
	ret0, _ := ret[0].([]*entity.Department)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDepartmentList indicates an expected call of GetDepartmentList.
func (mr *MockAuthServiceMockRecorder) GetDepartmentList(page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartmentList", reflect.TypeOf((*MockAuthService)(nil).GetDepartmentList), page, size)
}

// GetPermissionList mocks base method.
func (m *MockAuthService) GetPermissionList() ([]*entity.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionList")
	ret0, _ := ret[0].([]*entity.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionList indicates an expected call of GetPermissionList.
func (mr *MockAuthServiceMockRecorder) GetPermissionList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionList", reflect.TypeOf((*MockAuthService)(nil).GetPermissionList))
}

// GetRoleByID mocks base method.
func (m *MockAuthService) GetRoleByID(id int64) (*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", id)
	ret0, _ := ret[0].(*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockAuthServiceMockRecorder) GetRoleByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockAuthService)(nil).GetRoleByID), id)
}

// GetRoleList mocks base method.
func (m *MockAuthService) GetRoleList(page, size int) ([]*entity.Role, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleList", page, size)
	ret0, _ := ret[0].([]*entity.Role)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoleList indicates an expected call of GetRoleList.
func (mr *MockAuthServiceMockRecorder) GetRoleList(page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleList", reflect.TypeOf((*MockAuthService)(nil).GetRoleList), page, size)
}

// GetUserByID mocks base method.
func (m *MockAuthService) GetUserByID(id int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthServiceMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthService)(nil).GetUserByID), id)
}

// GetUserList mocks base method.
func (m *MockAuthService) GetUserList(departmentID int64, page, size int) ([]*entity.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList", departmentID, page, size)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockAuthServiceMockRecorder) GetUserList(departmentID, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockAuthService)(nil).GetUserList), departmentID, page, size)
}

// GetUserPermissions mocks base method.
func (m *MockAuthService) GetUserPermissions(userID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissions", userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissions indicates an expected call of GetUserPermissions.
func (mr *MockAuthServiceMockRecorder) GetUserPermissions(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissions", reflect.TypeOf((*MockAuthService)(nil).GetUserPermissions), userID)
}

// HasPermission mocks base method.
func (m *MockAuthService) HasPermission(userID int64, permissionCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", userID, permissionCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockAuthServiceMockRecorder) HasPermission(userID, permissionCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockAuthService)(nil).HasPermission), userID, permissionCode)
}

// IsTokenRevoked mocks base method.
func (m *MockAuthService) IsTokenRevoked(jti string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenRevoked", jti)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTokenRevoked indicates an expected call of IsTokenRevoked.
func (mr *MockAuthServiceMockRecorder) IsTokenRevoked(jti interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenRevoked", reflect.TypeOf((*MockAuthService)(nil).IsTokenRevoked), jti)
}

// Login mocks base method.
func (m *MockAuthService) Login(username, password string) (string, string, *entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*entity.User)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), username, password)
}

// RefreshToken mocks base method.
func (m *MockAuthService) RefreshToken(refreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthServiceMockRecorder) RefreshToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthService)(nil).RefreshToken), refreshToken)
}

// RevokeToken mocks base method.
func (m *MockAuthService) RevokeToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockAuthServiceMockRecorder) RevokeToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockAuthService)(nil).RevokeToken), token)
}

// SetTracer mocks base method.
func (m *MockAuthService) SetTracer(tracer interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTracer", tracer)
}

// SetTracer indicates an expected call of SetTracer.
func (mr *MockAuthServiceMockRecorder) SetTracer(tracer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTracer", reflect.TypeOf((*MockAuthService)(nil).SetTracer), tracer)
}

// UpdateDepartment mocks base method.
func (m *MockAuthService) UpdateDepartment(dept *entity.Department) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDepartment", dept)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDepartment indicates an expected call of UpdateDepartment.
func (mr *MockAuthServiceMockRecorder) UpdateDepartment(dept interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDepartment", reflect.TypeOf((*MockAuthService)(nil).UpdateDepartment), dept)
}

// UpdateRole mocks base method.
func (m *MockAuthService) UpdateRole(role *entity.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockAuthServiceMockRecorder) UpdateRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockAuthService)(nil).UpdateRole), role)
}

// UpdateUser mocks base method.
func (m *MockAuthService) UpdateUser(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAuthServiceMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAuthService)(nil).UpdateUser), user)
}

// ValidateRefreshToken mocks base method.
func (m *MockAuthService) ValidateRefreshToken(tokenString string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken", tokenString)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockAuthServiceMockRecorder) ValidateRefreshToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockAuthService)(nil).ValidateRefreshToken), tokenString)
}

// ValidateToken mocks base method.
func (m *MockAuthService) ValidateToken(tokenString string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceMockRecorder) ValidateToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthService)(nil).ValidateToken), tokenString)
}

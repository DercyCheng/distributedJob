// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/model_context_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockModelContextService is a mock of ModelContextService interface.
type MockModelContextService struct {
	ctrl     *gomock.Controller
	recorder *MockModelContextServiceMockRecorder
}

// MockModelContextServiceMockRecorder is the mock recorder for MockModelContextService.
type MockModelContextServiceMockRecorder struct {
	mock *MockModelContextService
}

// NewMockModelContextService creates a new mock instance.
func NewMockModelContextService(ctrl *gomock.Controller) *MockModelContextService {
	mock := &MockModelContextService{ctrl: ctrl}
	mock.recorder = &MockModelContextServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelContextService) EXPECT() *MockModelContextServiceMockRecorder {
	return m.recorder
}

// GetModelContext mocks base method.
func (m *MockModelContextService) GetModelContext(modelID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelContext", modelID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelContext indicates an expected call of GetModelContext.
func (mr *MockModelContextServiceMockRecorder) GetModelContext(modelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelContext", reflect.TypeOf((*MockModelContextService)(nil).GetModelContext), modelID)
}
